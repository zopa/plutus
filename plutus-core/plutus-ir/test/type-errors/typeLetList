(let
  (nonrec)
  (typebind
    (tyvardecl List (fun (type) (type)))
    (lam
      a
      (type)
      (ifix
        (lam
          List
          (fun (type) (type))
          (lam
            a
            (type)
            (all
              out_List
              (type)
              (fun out_List (fun (fun a (fun [ List a ] out_List)) out_List))
            )
          )
        )
        a
      )
    )
  )
  (termbind
    (strict)
    (vardecl Nil (all a (type) [ List a ]))
    (abs
      a
      (type)
      (iwrap
        (lam
          List
          (fun (type) (type))
          (lam
            a
            (type)
            (all
              out_List
              (type)
              (fun out_List (fun (fun a (fun [ List a ] out_List)) out_List))
            )
          )
        )
        a
        (abs
          out_List
          (type)
          (lam
            case_Nil
            out_List
            (lam
              case_Cons
              (fun
                a
                (fun
                  [
                    (lam
                      a
                      (type)
                      (ifix
                        (lam
                          List
                          (fun (type) (type))
                          (lam
                            a
                            (type)
                            (all
                              out_List
                              (type)
                              (fun
                                out_List
                                (fun (fun a (fun [ List a ] out_List)) out_List)
                              )
                            )
                          )
                        )
                        a
                      )
                    )
                    a
                  ]
                  out_List
                )
              )
              case_Nil
            )
          )
        )
      )
    )
  )
  (termbind
    (strict)
    (vardecl Cons (all a (type) (fun a (fun [ List a ] [ List a ]))))
    (abs
      a
      (type)
      (lam
        arg_0
        a
        (lam
          arg_1
          [
            (lam
              a
              (type)
              (ifix
                (lam
                  List
                  (fun (type) (type))
                  (lam
                    a
                    (type)
                    (all
                      out_List
                      (type)
                      (fun
                        out_List
                        (fun (fun a (fun [ List a ] out_List)) out_List)
                      )
                    )
                  )
                )
                a
              )
            )
            a
          ]
          (iwrap
            (lam
              List
              (fun (type) (type))
              (lam
                a
                (type)
                (all
                  out_List
                  (type)
                  (fun
                    out_List (fun (fun a (fun [ List a ] out_List)) out_List)
                  )
                )
              )
            )
            a
            (abs
              out_List
              (type)
              (lam
                case_Nil
                out_List
                (lam
                  case_Cons
                  (fun
                    a
                    (fun
                      [
                        (lam
                          a
                          (type)
                          (ifix
                            (lam
                              List
                              (fun (type) (type))
                              (lam
                                a
                                (type)
                                (all
                                  out_List
                                  (type)
                                  (fun
                                    out_List
                                    (fun
                                      (fun a (fun [ List a ] out_List)) out_List
                                    )
                                  )
                                )
                              )
                            )
                            a
                          )
                        )
                        a
                      ]
                      out_List
                    )
                  )
                  [ [ case_Cons arg_0 ] arg_1 ]
                )
              )
            )
          )
        )
      )
    )
  )
  (termbind
    (strict)
    (vardecl
      match_List
      (all
        a
        (type)
        (fun
          [ List a ]
          (all
            out_List
            (type)
            (fun out_List (fun (fun a (fun [ List a ] out_List)) out_List))
          )
        )
      )
    )
    (abs
      a
      (type)
      (lam
        x
        [
          (lam
            a
            (type)
            (ifix
              (lam
                List
                (fun (type) (type))
                (lam
                  a
                  (type)
                  (all
                    out_List
                    (type)
                    (fun
                      out_List (fun (fun a (fun [ List a ] out_List)) out_List)
                    )
                  )
                )
              )
              a
            )
          )
          a
        ]
        (unwrap x)
      )
    )
  )
  [
    [
      {
        [
          { match_List (all a (type) (fun a a)) }
          { Nil (all a (type) (fun a a)) }
        ]
        (all a (type) (fun a a))
      }
      (abs a (type) (lam x a x))
    ]
    (lam
      head
      (all a (type) (fun a a))
      (lam tail [ List (all a (type) (fun a a)) ] head)
    )
  ]
)
